{"version":3,"sources":["firebase.js","redux/modules/word.js","Write.js","WordList.js","App.js","reportWebVitals.js","redux/configStore.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","word_db","collection","initialState","word_list","createWord","word","type","Title","styled","h1","InputWrapper","div","Button","button","Write","props","dispatch","useDispatch","word_ref","React","useRef","desc_ref","example_ref","Fragment","ref","onClick","current","value","desc","example","console","log","word_data","add","then","docRef","id","catch","err","window","alert","addWordFB","history","replace","Card","Text","p","size","underline","color","AddButton","withRouter","useSelector","state","useEffect","get","docs","forEach","doc","exists","data","map","w","push","Container","App","path","exact","component","WordList","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","middlewares","thunk","enhancer","createBrowserHistory","applyMiddleware","rootReducer","combineReducers","action","length","new_word_list","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9f15e41b.chunk.js","sourcesContent":["//완료\n//firebase.js\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\n\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n    /*apiKey: \"AIzaSyD_JUXKzNiUQOm2yP0vBnY4os-rX6uEagQ\",\n    authDomain: \"mydictionary-a3b44.firebaseapp.com\",\n    projectId: \"mydictionary-a3b44\",\n    storageBucket: \"mydictionary-a3b44.appspot.com\",\n    messagingSenderId: \"206569074281\",\n    appId: \"1:206569074281:web:3480acb48c228ff0c1fcf8\"\n*/\n    apiKey: \"AIzaSyDKClOp-r42fDQSvecb_Cc8_QyEMxclRH8\",\n    authDomain: \"word-list-62725.firebaseapp.com\",\n    projectId: \"word-list-62725\",\n    storageBucket: \"word-list-62725.appspot.com\",\n    messagingSenderId: \"694665122611\",\n    appId: \"1:694665122611:web:498eb7ea7b4d080f392446\",\n    measurementId: \"G-BVL7L1B7ZE\"\n    \n  };\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig)\n// firebase의 firestore 인스턴스를 변수에 저장\nconst firestore = firebase.firestore();\n\n// 필요한 곳에서 사용할 수 있도록 내보내기\nexport { firestore };","import { firestore } from \"../../firebase\";\n\n// Actions\nconst LOAD = \"word/LOAD\";\nconst CREATE = \"word/CREATE\";\n//const UPDATE = \"word/UPDATE\";\n\nconst word_db = firestore.collection(\"word\");\n\n\nconst initialState = {\n    word_list: []\n};\n\n// Action Creators\nexport const loadWord = (word) => {\n  return { type: LOAD, word };\n};\n\nexport const createWord = (word) => {\n  return { type: CREATE, word };\n};\n\n\nexport const loadWordFB = () => {\n  return function (dispatch) {//미들웨어 부분\n    word_db.get().then((docs) => {//응답 받은 모든 documant를 then에서 가져옴\n      let word_data = [];//리덕스에 넣기 위한 배열\n      docs.forEach((doc) => {\n        if (doc.exists) {\n            word_data = [...word_data, doc.data()]; //word_data = [...word_data, { id: doc.id, ...doc.data() }]; //id를 가져와 수정 삭제 할때는 주석처리 같이함\n        }\n      });\n\n      console.log(word_data);\n      // 이제 액션이 디스패치\n      dispatch(loadWord(word_data));\n    });\n  };\n};\n\nexport const addWordFB = (word) => {    \n\n  return function (dispatch) {\n\n    let word_data = { word: word.word, desc: word.desc, example: word.example };\n\n    word_db\n      .add(word_data)\n      .then((docRef) => {\n        // id를 추가한다!\n        word_data = { ...word_data, id: docRef.id };\n\n        console.log(word_data);\n\n        // 성공했을 때는? 액션 디스패치!\n        dispatch(createWord(word_data));\n      })\n      .catch((err) => {\n        // 여긴 에러가 났을 때 들어오는 구간입니다!\n        console.log(err);\n        window.alert(\"오류가 났네요! 나중에 다시 시도해주세요!\");\n\n      });\n  };\n};\n\n// Reducer\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    // do reducer stuff\n    case \"word/LOAD\": {\n        if(action.word.length >0){//비어있지 않다면\n          return { word_list: action.word };\n        }\n  \n        return state;\n      }\n\n    case \"word/CREATE\": {\n      const new_word_list = [...state.word_list, action.word];\n      //return { ...state, word_list: new_word_list };\n      return {  ...state, word_list: new_word_list };\n    }\n\n\n    default:\n      return state;\n  }\n}\n","\nimport styled from \"styled-components\";\n\nimport {useDispatch} from \"react-redux\";\nimport {createWord} from \"./redux/modules/word\";\n\nimport { addWordFB } from \"./redux/modules/word\";\nimport React from \"react\";\n\nconst Write = (props) => {\n\n  const dispatch = useDispatch();\n\n  const word_ref = React.useRef(null);\n  const desc_ref = React.useRef(null);\n  const example_ref = React.useRef(null);\n  let count = 0;  \n\n  const addWord = () =>{\n        const word = {          \n          word: word_ref.current.value,\n          desc: desc_ref.current.value,\n          example: example_ref.current.value,\n        }\n\n        {/*this.props.create(word);*/}\n\n        if(dispatch(createWord(word)))  {\n          console.log(word);\n          count += 1;\n          dispatch(addWordFB(word))\n        }\n        props.history.replace(\"/\");\n    \n    }\n\n  return (\n    <React.Fragment>{/*로 감싸서 반환한다면 Fragment는 dom에 추가되지 않기*/}\n      <Title>단어 추가하기</Title>\n      <InputWrapper>\n        <p>단어</p>\n        <input ref={word_ref} />\n      </InputWrapper>\n      <hr/>\n\n      <InputWrapper>\n        <p>설명</p>\n        <input ref={desc_ref} />\n      </InputWrapper>\n      <hr/>\n      <InputWrapper>\n        <p>예시</p>\n        <input ref={example_ref} />\n      </InputWrapper>\n\n      {/* 아직은 이 버튼에 아무런 동작도 주지 않을거예요 :) */}\n      <Button onClick={addWord}>추가하기</Button>\n    </React.Fragment>\n  );\n};\n\n// 제목 스타일을 잡아줄 거예요.\nconst Title = styled.h1`\n  width: 40vw;\n  margin: 8px auto;\n`;\n\n// input이 들어갈 부분을 감싸줄거예요. 배경색도 흰색으로 줘볼게요!\n// 이 div 아래에 있는 p 태그에 접근할 때는 & > p로 접근할 수 있어요.\n// 이 div 아래에 있는 input 태그에 접근할 때는 & > input으로 접근할 수 있어요.\nconst InputWrapper = styled.div`\n  width: 20vw;\n  height: auto;\n  display: flex;\n  flex-direction: column;\n  padding: 8px 16px;\n  margin: 8px auto;\n  box-sizing: border-box;\n  background-color: #ffffff;\n  & > p {\n    text-decoration: underline;\n    font-size: 8px;\n    color: #888888;\n    margin: 4px 0px;\n  }\n\n  & > input {\n    border: 1px solid #000000;\n    width: 100%;\n    padding: 2px 4px;\n    margin: 4px 0px;\n    box-sizing: border-box;\n  }\n`;\n\n// 추가하기 버튼 스타일을 잡아줄거예요.\nconst Button = styled.button`\n  background-color: #6100ff;\n  color: #ffffff;\n  font-size: 16px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-sizing: border-box;\n  padding: 8px 0px;\n  margin: 16px;\n`;\n\nexport default Write;\n","import React ,{useEffect} from \"react\";\nimport styled from \"styled-components\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { loadWordFB} from \"./redux/modules/word\";\nimport { withRouter} from 'react-router-dom';\n\n\nconst WordList = (props) => {\n  \n  const dispatch = useDispatch();\n\n  const word_list = useSelector((state) => state.word.word_list); //word_list는 딕셔너리 형태\n  \n  //실시간으로 계속해서 렌더링 되면 안됨 dispatch 될 때마다 렌더링 되도록.. \n  useEffect( ()=>{\n    console.log(\"word_list\", word_list)\n    dispatch(loadWordFB());\n  }, dispatch);\n  \n  \n  return (\n    <React.Fragment>\n      <Title>My dictionary</Title>\n      { word_list.map((w) => {\n        return (\n          <Card key={w.id}>\n            <Text color=\"#888888\" size=\"8px\" underline>\n              단어\n            </Text>\n            <Text>{w.word}</Text>\n            <Text color=\"#888888\" size=\"8px\" underline>\n              설명\n            </Text>\n            <Text>{w.desc}</Text>\n            <Text color=\"#888888\" size=\"8px\" underline>\n              예시\n            </Text>\n            <Text color=\"blue\">{w.example}</Text>\n          </Card>\n        );\n      })}\n      <AddButton\n        onClick={() => {\n          props.history.push(\"/write\");\n        }}\n      >\n        +\n      </AddButton>\n    </React.Fragment>\n  );\n};\n\nconst Title = styled.h1`\n  width: 60vw;\n  margin: 8px auto;\n`;\n\nconst Card = styled.div`\n  width: 20vw;\n  height: auto;\n  display: flex;\n  flex-direction: column;\n  padding: 4px 16px;\n  margin: 8px auto;\n  box-sizing: border-box;\n  background-color: #ffffff;\n`;\n\nconst Text = styled.p`\n  font-size: ${(props) => (props.size ? `${props.size}` : \"16px\")};\n  ${(props) => (props.underline ? \"text-decoration: underline;\" : \"\")}\n  ${(props) => (props.color ? `color: ${props.color};` : \"\")}\n  margin: 4px 0px;\n`;\n\nconst AddButton = styled.button`\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  width: 50px;\n  height: 50px;\n  border-radius: 50px;\n  background-color: #6100ff;\n  color: #fff;\n  font-size: 50px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport default withRouter(WordList);\n","//완료\nimport React from 'react';\nimport { Route } from 'react-router';\nimport {BrowserRouter} from \"react-router-dom\";\n\nimport styled from \"styled-components\";\n\nimport Write from \"./Write\";\nimport WordList from \"./WordList\";\n\nconst App = () => {\n  \n  return (\n    <React.Fragment>\n      <Container>\n        <BrowserRouter>\n          <Route path=\"/\" exact component={WordList} />\n          <Route path=\"/write\" exact component={Write} />\n        </BrowserRouter>\n      </Container>\n    </React.Fragment>\n  );\n}\n\n\nconst Container = styled.div`\n  max-width: 350px;\n  min-height: 60vh;\n  padding: 16px;\n  margin: 20px auto;\n  border-radius: 5px;\n  border: 1px solid #ddd;\n  flex-direction: column;\n  background-color: #E2FFF8;\n  display: flex;\n`;\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","//완료\nimport { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport word from \"./modules/word\";\nimport {createBrowserHistory} from \"history\";\n\nconst middlewares = [thunk];\n\nexport const history = createBrowserHistory();\n\nconst enhancer = applyMiddleware(...middlewares);//store에 middleware 중 한개인 thunk 넣었다. (파이어 스토어에 있는 데이터 가져와서 쓰려면 비동기 통신 해야하므로)\nconst rootReducer = combineReducers({ word });\nconst store = createStore(rootReducer, enhancer);\n\nexport default store;\n","//완료\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from \"./redux/configStore\";\nimport { BrowserRouter } from 'react-router-dom';\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n    <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}